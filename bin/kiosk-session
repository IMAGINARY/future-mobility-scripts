#!/bin/bash

PIDS=""
function finish {
  EXIT_CODE=$?
  kill $PIDS >/dev/null 2>&1
  exit $EXIT_CODE
}
trap finish SIGINT SIGTERM EXIT


# Save current environment
EXPORTED_ENV=$(export)

refresh_config() {
    # Source system wide default values
    SYSTEM_DEFAULTS_FILE="/etc/default/kiosk"
    [ -r "$SYSTEM_DEFAULTS_FILE" ] && . "$SYSTEM_DEFAULTS_FILE" 

    # Source user-defined default values
    CONFIG_DIR="${XDG_CONFIG_HOME:-"$HOME/.config"}/kiosk"
    USER_DEFAULTS_FILE="${CONFIG_DIR}/default"
    [ -r "$USER_DEFAULTS_FILE" ] && . "$USER_DEFAULTS_FILE" 

    # Restore previous environment such that it takes precendence over the config files
    eval "$EXPORTED_ENV"
}
refresh_config

# Disable screen saver
xset s noblank
xset s off

# Apply screen layout script, if defined
if [ -n "$INIT_SCREEN_LAYOUT" ]; then
    echo "Running screen layout script: $INIT_SCREEN_LAYOUT"
    timeout 3m bash -c "DELAY=1; echo \$DELAY; while true; do \"${INIT_SCREEN_LAYOUT}\"; RET=\$?; if [[ \$RET != 0 ]]; then echo \"Screen layout script did not succeed (Exit code: \$RET). Will retry in \${DELAY}s.\"; echo 'Current screen layout:'; xrandr; sleep \$DELAY; else break; fi; DELAY=\$(( \$DELAY * 2 )); done"
    PID_CMD=$!
    PIDS="$PIDS $PID_CMD"
    wait $PID_CMD
    if [[ $? != 0 ]]; then
        echo "Screen layout script did not succeed. Giving up."
    else
        echo "Screen layout script seems to have succeeded."
    fi
    echo "Current screen layout:"
    xrandr
else
    >&2 echo "Skipping screen layout setting: No screen layout script found."
fi

do_map_touch_screen_devices_to_outputs() {
    local LENGTH NUM i DEVICE_INDEX OUTPUT_INDEX
    LENGTH="${#TOUCH_SCREEN_OUTPUT_MAP[@]}"
    NUM="$(( ${#TOUCH_SCREEN_OUTPUT_MAP[@]} / 2 ))"

    if [[ "$(( $LENGTH % 2 ))" != "0" ]]; then
        echo "TOUCH_SCREEN_OUTPUT_MAP has uneven length. Aborting."
        exit 1
    fi

    for ((i=0; i < "$NUM"; i++))
    do
        DEVICE_INDEX=$(( 2 * "${i}" + 0 ))
        OUTPUT_INDEX=$(( 2 * "${i}" + 1 ))
        DEVICE="${TOUCH_SCREEN_OUTPUT_MAP[$DEVICE_INDEX]}"
        OUTPUT="${TOUCH_SCREEN_OUTPUT_MAP[$OUTPUT_INDEX]}"
        echo "Mapping touch-screen device ${DEVICE} to output ${OUTPUT}."
        map-input-device-node-to-output "${DEVICE}" "${OUTPUT}"
    done
}

# Monitor RandR and XInput events and map touch-screen devices to outputs accordingly
do_monitor_and_map_touch_screen_devices_to_outputs() {
    # RandR events
    (
        (echo "RRScreenChangeNotify event Bootstrapping!"; xev -root -event randr) |
            grep --line-buffered "RRScreenChangeNotify event" |
            while read -r; do xrandr; do_map_touch_screen_devices_to_outputs; done
    ) &
    PIDS="$PIDS $!"
    # XInput events
    (
        inputplug --foreground --bootstrap --no-act --verbose --command "" |
            grep --line-buffered -E '^"" "XIDeviceEnabled" "[0-9]+" "XISlavePointer"' |
            while read -r; do do_map_touch_screen_devices_to_outputs; done
    ) &
    PIDS="$PIDS $!"
}

do_monitor_and_map_touch_screen_devices_to_outputs

exec_exhibit() {
    local CMD=()
    [ "$HIDE_CURSOR" = true ] && CMD+=( hidecursor )
    [ "$LOOP_MODE" = true ] && CMD+=( repeat-exhibit )
    CMD+=( exhibit-default )
    exec "${CMD[@]}"
}

# Set up the default environment for the default exhibit and run it
( ! init-default --test || init-default ) \
    && exhibit-default --test \
    && (exec_exhibit &)
PIDS="$PIDS $!"

# Run a compositor in the background for dealing with vsync and tearing
# Should be done after screen setup (e.g. in init-* scripts)
# Configure picom via its config file (see `man picom`)
picom &
PIDS="$PIDS $!"

# Set wallpaper
# Should be done after screen setup (e.g. in init-* scripts)
feh --bg-max /opt/kiosk-scripts/assets/wallpaper.png --image-bg "$(< /opt/kiosk-scripts/assets/wallpaper-bg-color.txt)" &
PIDS="$PIDS $!"

# Keep the session alive until its explicitly killed from outside
env sleep infinity &
PID_SLEEP=$!
PIDS="$PIDS $PID_SLEEP"

wait $PID_SLEEP
